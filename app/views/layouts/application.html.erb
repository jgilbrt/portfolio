<!DOCTYPE html>
<html>
  <head>
    <title>Portfolio</title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <%= stylesheet_link_tag "application", "data-turbo-track": "reload" %>
    <%= javascript_importmap_tags %>

    <%= tag.link rel: "stylesheet", href: "https://fonts.googleapis.com/css2?family=Source+Code+Pro&display=swap" %>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />

  </head>

<body data-controller="<%= controller_name %>" data-action="<%= action_name %>">
  <%= render 'shared/navbar' %>

  <%= render 'shared/music_player' %>

  <%= yield %>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

  <script>
    document.addEventListener("turbo:load", () => {
      const player = document.getElementById("music-player");
      const reopenBtn = document.getElementById("reopen-music-player");
      const closeBtn = document.getElementById("player-close");
      const audio = document.getElementById("audio-player");
      const playPauseBtn = document.getElementById("play-pause");
      const progressBar = document.getElementById("progress-bar");
      const icon = playPauseBtn.querySelector("i");
      const currentTimeDisplay = document.getElementById("current-time");
      const durationDisplay = document.getElementById("duration");
      const volumeSlider = document.getElementById("volume-slider");

      if (!player) return; // in case not on page yet

      function formatTime(s) {
        const m = Math.floor(s / 60);
        const sec = Math.floor(s % 60);
        return `${m}:${sec < 10 ? "0" : ""}${sec}`;
      }

      // Load saved playback state
      const savedState = JSON.parse(localStorage.getItem("musicPlayerState") || "{}");

      if (savedState.currentTime) {
        audio.currentTime = savedState.currentTime;
      }

      if (savedState.volume !== undefined) {
        audio.volume = savedState.volume;
        volumeSlider.value = savedState.volume;
      }

      if (savedState.isPlaying) {
        audio.play().catch(() => {
          // Autoplay might be blocked; ignore
        });
        player.classList.remove("d-none");
        reopenBtn.classList.add("d-none");
      } else {
        player.classList.add("d-none");
        reopenBtn.classList.remove("d-none");
      }

      function saveState() {
        const state = {
          currentTime: audio.currentTime,
          volume: audio.volume,
          isPlaying: !audio.paused,
        };
        localStorage.setItem("musicPlayerState", JSON.stringify(state));
      }

      reopenBtn.addEventListener("click", () => {
        player.classList.remove("d-none");
        reopenBtn.classList.add("d-none");
      });

      closeBtn.addEventListener("click", () => {
        audio.pause();
        icon.classList.replace("bi-pause-fill", "bi-play-fill");
        player.classList.add("d-none");
        reopenBtn.classList.remove("d-none");
        saveState();
      });

      playPauseBtn.addEventListener("click", () => {
        if (!audio.readyState) audio.load();
        if (audio.paused) audio.play();
        else audio.pause();
      });

      audio.addEventListener("play", () => {
        icon.classList.replace("bi-play-fill", "bi-pause-fill");
        saveState();
      });

      audio.addEventListener("pause", () => {
        icon.classList.replace("bi-pause-fill", "bi-play-fill");
        saveState();
      });

      audio.addEventListener("timeupdate", () => {
        if (audio.duration) {
          progressBar.style.width = (audio.currentTime / audio.duration) * 100 + "%";
          currentTimeDisplay.textContent = formatTime(audio.currentTime);
          saveState();
        }
      });

      audio.addEventListener("loadedmetadata", () => {
        durationDisplay.textContent = formatTime(audio.duration);
      });

      audio.addEventListener("ended", () => {
        icon.classList.replace("bi-pause-fill", "bi-play-fill");
        progressBar.style.width = "0%";
        currentTimeDisplay.textContent = "0:00";
        saveState();
      });

      volumeSlider.addEventListener("input", () => {
        audio.volume = volumeSlider.value;
        saveState();
      });

      // Set initial volume
      audio.volume = volumeSlider.value;
    });
  </script>
</body>
</html>
